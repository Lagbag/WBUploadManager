use std::sync::{Arc, Mutex};
use std::path::Path;
use std::fs;
use eframe::egui;
use eframe::App;
use rfd::FileDialog;
use arboard::Clipboard;
use crate::profile::{Profile, ProfileManager};
use crate::downloader::{Downloader, FileInfo};
use crate::uploader::WbUploader;
use crate::config::Config;

pub struct DownloaderApp {
    urls: String,
    download_path: String,
    file_names: String,
    profile_manager: ProfileManager,
    new_profile_name: String,
    logs: Arc<Mutex<Vec<String>>>,
    is_processing: Arc<Mutex<bool>>,
    total_files: Arc<Mutex<Option<usize>>>,
    processed_files: Arc<Mutex<usize>>,
    show_logs: bool,
    use_local_path: bool,
    local_source_path: String,
    failed_vendor_codes: Arc<Mutex<Vec<String>>>,
}

impl Default for DownloaderApp {
    fn default() -> Self {
        Self {
            urls: String::new(),
            download_path: String::new(),
            file_names: String::new(),
            profile_manager: ProfileManager::new().unwrap_or_else(|_| ProfileManager {
                profiles: vec![Profile {
                    name: "Default".to_string(),
                    api_key: String::new(),
                }],
                selected_index: 0,
                config: Config::new().unwrap(),
            }),
            new_profile_name: String::new(),
            logs: Arc::new(Mutex::new(Vec::new())),
            is_processing: Arc::new(Mutex::new(false)),
            total_files: Arc::new(Mutex::new(None)),
            processed_files: Arc::new(Mutex::new(0)),
            show_logs: false,
            use_local_path: false,
            local_source_path: String::new(),
            failed_vendor_codes: Arc::new(Mutex::new(Vec::new())),
        }
    }
}

impl App for DownloaderApp {
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        let visuals = if ctx.style().visuals.dark_mode {
            let mut visuals = egui::Visuals::dark();
            visuals.widgets.noninteractive.bg_fill = egui::Color32::from_rgb(30, 30, 30);
            visuals.widgets.noninteractive.fg_stroke = egui::Stroke::new(1.0, egui::Color32::WHITE);
            visuals.widgets.inactive.bg_fill = egui::Color32::from_rgb(50, 50, 50);
            visuals.widgets.inactive.fg_stroke = egui::Stroke::new(1.0, egui::Color32::WHITE);
            visuals.widgets.active.bg_fill = egui::Color32::from_rgb(80, 80, 80);
            visuals.widgets.active.fg_stroke = egui::Stroke::new(1.0, egui::Color32::WHITE);
            visuals.override_text_color = Some(egui::Color32::WHITE);
            visuals
        } else {
            let mut visuals = egui::Visuals::light();
            visuals.widgets.noninteractive.bg_fill = egui::Color32::from_rgb(245, 245, 245);
            visuals.widgets.noninteractive.fg_stroke = egui::Stroke::new(1.0, egui::Color32::BLACK);
            visuals.widgets.inactive.bg_fill = egui::Color32::WHITE;
            visuals.widgets.inactive.fg_stroke = egui::Stroke::new(1.0, egui::Color32::BLACK);
            visuals.widgets.active.bg_fill = egui::Color32::from_rgb(200, 200, 200);
            visuals.widgets.active.fg_stroke = egui::Stroke::new(1.0, egui::Color32::BLACK);
            visuals.override_text_color = Some(egui::Color32::BLACK);
            visuals.selection.bg_fill = egui::Color32::from_rgb(180, 200, 255);
            visuals.selection.stroke = egui::Stroke::new(1.0, egui::Color32::BLACK);
            visuals
        };
        ctx.set_visuals(visuals);

        if self.show_logs {
            egui::SidePanel::right("logs_panel")
                .resizable(true)
                .default_width(400.0)
                .show(ctx, |ui| {
                    ui.heading(egui::RichText::new("üìú –õ–æ–≥–∏").strong().size(22.0));
                    ui.add_space(10.0);
                    let logs = self.logs.lock().unwrap();
                    egui::ScrollArea::vertical().show(ui, |ui| {
                        for log in logs.iter() {
                            ui.label(log);
                            if ui.button("üìã").on_hover_text("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å").clicked() {
                                let mut clipboard = Clipboard::new().unwrap();
                                clipboard.set_text(log).unwrap();
                            }
                            ui.add_space(5.0);
                        }
                    });
                    ui.add_space(10.0);
                    if ui.button("üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏").clicked() {
                        let mut logs = self.logs.lock().unwrap();
                        logs.clear();
                    }
                    if ui.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å").clicked() {
                        self.show_logs = false;
                    }
                });
        }

        egui::CentralPanel::default().frame(egui::Frame {
            inner_margin: egui::Margin::same(20.0),
            fill: if ctx.style().visuals.dark_mode {
                egui::Color32::from_rgb(60, 80, 180)
            } else {
                egui::Color32::from_rgb(180, 200, 255)
            },
            rounding: egui::Rounding::same(8.0),
            ..Default::default()
        }).show(ctx, |ui| {
            ui.add_space(20.0);
            ui.heading(egui::RichText::new("üî• –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Wildberries").strong().size(32.0));
            ui.add_space(30.0);

            ui.group(|ui| {
                ui.visuals_mut().widgets.noninteractive.rounding = egui::Rounding::same(8.0);
                ui.visuals_mut().widgets.noninteractive.bg_fill = if ctx.style().visuals.dark_mode {
                    egui::Color32::from_rgb(70, 70, 70)
                } else {
                    egui::Color32::from_rgb(220, 220, 220)
                };
                ui.label(egui::RichText::new("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏").strong().size(22.0));
                ui.add_space(10.0);
                ui.horizontal(|ui| {
                    egui::ComboBox::from_label("–ü—Ä–æ—Ñ–∏–ª—å")
                        .selected_text(&self.profile_manager.current_profile().name)
                        .width(200.0)
                        .show_ui(ui, |ui| {
                            for (i, profile) in self.profile_manager.profiles.iter().enumerate() {
                                if ui.selectable_label(self.profile_manager.selected_index == i, &profile.name).clicked() {
                                    self.profile_manager.selected_index = i;
                                }
                            }
                        });
                    ui.add(egui::TextEdit::singleline(&mut self.new_profile_name).hint_text("–ù–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å").desired_width(150.0));
                    if ui.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å").clicked() && !self.new_profile_name.is_empty() {
                        self.profile_manager.add_profile(self.new_profile_name.clone());
                        self.new_profile_name.clear();
                        if let Err(e) = self.profile_manager.save() {
                            let mut logs = self.logs.lock().unwrap();
                            logs.push(format!("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π: {}", e));
                        }
                    }
                });
                ui.add_space(10.0);
                ui.vertical(|ui| {
                    ui.label(egui::RichText::new("üîë WB API –∫–ª—é—á:").strong());
                    ui.add_space(5.0);
                    ui.add(egui::TextEdit::multiline(&mut self.profile_manager.current_profile_mut().api_key)
                        .desired_width(400.0)
                        .desired_rows(3));
                    if ui.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å").clicked() {
                        let api_key = self.profile_manager.current_profile().api_key.trim();
                        if api_key.is_empty() {
                            let mut logs = self.logs.lock().unwrap();
                            logs.push("–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º".to_string());
                        } else {
                            match self.profile_manager.save() {
                                Ok(()) => {
                                    let mut logs = self.logs.lock().unwrap();
                                    logs.push("API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω".to_string());
                                }
                                Err(e) => {
                                    let mut logs = self.logs.lock().unwrap();
                                    logs.push(format!("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–∞: {}", e));
                                }
                            }
                        }
                        ctx.request_repaint();
                    }
                });
            });

            ui.add_space(30.0);
            ui.group(|ui| {
                ui.visuals_mut().widgets.noninteractive.rounding = egui::Rounding::same(8.0);
                ui.visuals_mut().widgets.noninteractive.bg_fill = if ctx.style().visuals.dark_mode {
                    egui::Color32::from_rgb(70, 70, 70)
                } else {
                    egui::Color32::from_rgb(220, 220, 220)
                };
                ui.label(egui::RichText::new("üì• –ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤").strong().size(22.0));
                ui.add_space(10.0);
                ui.horizontal(|ui| {
                    ui.checkbox(&mut self.use_local_path, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É");
                });
                ui.add_space(10.0);
                if !self.use_local_path {
                    ui.horizontal(|ui| {
                        ui.label(egui::RichText::new("üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):").strong());
                        text_edit_with_context_menu(ui, &mut self.urls, 400.0, "https://disk.yandex.ru/d/xxx/09.06,https://disk.yandex.ru/d/xxx/10.06");
                    });
                } else {
                    ui.horizontal(|ui| {
                        ui.label(egui::RichText::new("üìÇ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞:").strong());
                        ui.add(egui::TextEdit::singleline(&mut self.local_source_path).desired_width(300.0));
                        if ui.button("üìÅ –í—ã–±—Ä–∞—Ç—å").clicked() {
                            if let Some(path) = FileDialog::new().pick_folder() {
                                self.local_source_path = path.to_string_lossy().to_string();
                            }
                        }
                    });
                }
            });

            ui.add_space(30.0);
            ui.group(|ui| {
                ui.visuals_mut().widgets.noninteractive.rounding = egui::Rounding::same(8.0);
                ui.visuals_mut().widgets.noninteractive.bg_fill = if ctx.style().visuals.dark_mode {
                    egui::Color32::from_rgb(70, 70, 70)
                } else {
                    egui::Color32::from_rgb(220, 220, 220)
                };
                ui.label(egui::RichText::new("üìÅ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è").strong().size(22.0));
                ui.add_space(10.0);
                ui.horizontal(|ui| {
                    ui.label(egui::RichText::new("üìÇ –ü—É—Ç—å:").strong());
                    ui.add(egui::TextEdit::singleline(&mut self.download_path).desired_width(300.0));
                    if ui.button("üìÅ –í—ã–±—Ä–∞—Ç—å").clicked() {
                        if let Some(path) = FileDialog::new().pick_folder() {
                            self.download_path = path.to_string_lossy().to_string();
                        }
                    }
                });
            });

            ui.add_space(30.0);
            ui.group(|ui| {
                ui.visuals_mut().widgets.noninteractive.rounding = egui::Rounding::same(8.0);
                ui.visuals_mut().widgets.noninteractive.bg_fill = if ctx.style().visuals.dark_mode {
                    egui::Color32::from_rgb(70, 70, 70)
                } else {
                    egui::Color32::from_rgb(220, 220, 220)
                };
                ui.label(egui::RichText::new("üìã Vendor Codes").strong().size(22.0));
                ui.add_space(10.0);
                ui.horizontal(|ui| {
                    ui.label(egui::RichText::new("üî¢ –°–ø–∏—Å–æ–∫ vendor codes (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ):").strong());
                    ui.vertical(|ui| {
                        egui::ScrollArea::vertical()
                            .max_height(100.0)
                            .show(ui, |ui| {
                                text_edit_with_context_menu(ui, &mut self.file_names, 400.0, "PRINT-NNS-YVG-001\nPRINT-NNS-YVG-002");
                            });
                    });
                });
            });

            ui.add_space(30.0);
            let is_processing = *self.is_processing.lock().unwrap();
            ui.add_enabled_ui(!is_processing, |ui| {
                let button = ui.add(egui::Button::new("üöÄ –ó–∞–ø—É—Å–∫").rounding(8.0));
                if button.clicked() {
                    let urls = self.urls.clone();
                    let download_path = self.download_path.clone();
                    let local_source_path = self.local_source_path.clone();
                    let vendor_codes: Vec<String> = self.file_names.trim()
                        .lines()
                        .map(|s| s.trim().to_string())
                        .filter(|s| !s.is_empty())
                        .collect();
                    let api_key = self.profile_manager.current_profile().api_key.clone();
                    if vendor_codes.is_empty() || download_path.is_empty() || (self.use_local_path && local_source_path.is_empty()) || (!self.use_local_path && urls.is_empty()) {
                        let mut logs = self.logs.lock().unwrap();
                        logs.push("–û—à–∏–±–∫–∞: –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è".to_string());
                        return;
                    }
                    if !self.use_local_path && !urls.split(',').all(|s| s.trim().contains("disk.yandex.ru/d/")) {
                        let mut logs = self.logs.lock().unwrap();
                        logs.push("–û—à–∏–±–∫–∞: –≤—Å–µ —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫".to_string());
                        return;
                    }
                    if !Path::new(&download_path).is_absolute() {
                        let mut logs = self.logs.lock().unwrap();
                        logs.push("–û—à–∏–±–∫–∞: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º".to_string());
                        return;
                    }
                    if self.use_local_path && !Path::new(&local_source_path).is_absolute() {
                        let mut logs = self.logs.lock().unwrap();
                        logs.push("–û—à–∏–±–∫–∞: –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º".to_string());
                        return;
                    }
                    if api_key.is_empty() {
                        let mut logs = self.logs.lock().unwrap();
                        logs.push("–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω".to_string());
                        return;
                    }

                    let logs = Arc::clone(&self.logs);
                    let is_processing = Arc::clone(&self.is_processing);
                    let total_files = Arc::clone(&self.total_files);
                    let processed_files = Arc::clone(&self.processed_files);
                    let use_local_path = self.use_local_path;
                    let failed_vendor_codes = Arc::clone(&self.failed_vendor_codes);
                    let file_names = Arc::new(Mutex::new(self.file_names.clone()));
                    let public_keys: Vec<String> = urls
                        .split(',')
                        .map(|s| s.trim().to_string())
                        .filter(|s| !s.is_empty())
                        .collect();

                    {
                        let mut logs = logs.lock().unwrap();
                        logs.push("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏...".to_string());
                    }
                    *is_processing.lock().unwrap() = true;
                    *processed_files.lock().unwrap() = 0;
                    *total_files.lock().unwrap() = Some(vendor_codes.len());
                    failed_vendor_codes.lock().unwrap().clear();

                    let public_keys_for_thread = public_keys.clone();
                    std::thread::spawn(move || {
                        {
                            let mut logs = logs.lock().unwrap();
                            logs.push("–ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫".to_string());
                        }

                        let files = if use_local_path {
                            {
                                let mut logs = logs.lock().unwrap();
                                logs.push("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Downloader –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞".to_string());
                            }
                            let downloader = match Downloader::new(Vec::new(), download_path.clone(), vendor_codes.clone()) {
                                Ok(d) => d,
                                Err(e) => {
                                    {
                                        let mut logs = logs.lock().unwrap();
                                        logs.push(format!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e));
                                    }
                                    *is_processing.lock().unwrap() = false;
                                    return;
                                }
                            };
                            {
                                let mut logs = logs.lock().unwrap();
                                logs.push(format!("–ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏: {}", local_source_path));
                            }
                            match downloader.find_local_files(&local_source_path, &logs) {
                                Ok(files) => {
                                    {
                                        let mut logs = logs.lock().unwrap();
                                        logs.push(format!("–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {}", files.len()));
                                    }
                                    files
                                }
                                Err(e) => {
                                    {
                                        let mut logs = logs.lock().unwrap();
                                        logs.push(format!("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏: {}", e));
                                    }
                                    *is_processing.lock().unwrap() = false;
                                    return;
                                }
                            }
                        } else {
                            {
                                let mut logs = logs.lock().unwrap();
                                logs.push("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Downloader –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞".to_string());
                            }
                            let downloader = match Downloader::new(public_keys_for_thread.clone(), download_path.clone(), vendor_codes.clone()) {
                                Ok(d) => d,
                                Err(e) => {
                                    {
                                        let mut logs = logs.lock().unwrap();
                                        logs.push(format!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {}", e));
                                    }
                                    *is_processing.lock().unwrap() = false;
                                    return;
                                }
                            };
                            {
                                let mut logs = logs.lock().unwrap();
                                logs.push(format!("–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å URL: {:?}", public_keys_for_thread));
                            }
                            if let Err(e) = fs::create_dir_all(&download_path) {
                                {
                                    let mut logs = logs.lock().unwrap();
                                    logs.push(format!("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {}", e));
                                }
                                *is_processing.lock().unwrap() = false;
                                return;
                            }
                            match downloader.download_all(&logs, &total_files, &processed_files) {
                                Ok(files) => {
                                    {
                                        let mut logs = logs.lock().unwrap();
                                        logs.push(format!("–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {}", files.len()));
                                    }
                                    files
                                }
                                Err(e) => {
                                    {
                                        let mut logs = logs.lock().unwrap();
                                        logs.push(format!("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {}", e));
                                    }
                                    *is_processing.lock().unwrap() = false;
                                    return;
                                }
                            }
                        };

                        {
                            let mut logs = logs.lock().unwrap();
                            logs.push("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WbUploader".to_string());
                        }
                        let uploader = match WbUploader::new(api_key) {
                            Ok(u) => u,
                            Err(e) => {
                                {
                                    let mut logs = logs.lock().unwrap();
                                    logs.push(format!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WB: {}", e));
                                }
                                *is_processing.lock().unwrap() = false;
                                return;
                            }
                        };

                        {
                            let mut logs = logs.lock().unwrap();
                            logs.push("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ vendor codes".to_string());
                        }
                        for vendor_code in vendor_codes {
                            {
                                let mut logs = logs.lock().unwrap();
                                logs.push(format!("–û–±—Ä–∞–±–æ—Ç–∫–∞ vendorCode: {}", vendor_code));
                            }
                            match uploader.get_nm_id_by_vendor_code(&vendor_code, &logs) {
                                Ok(nm_id) => {
                                    let relevant_files: Vec<FileInfo> = files.iter()
                                        .filter(|f| f.articul == vendor_code)
                                        .cloned()
                                        .collect();
                                    if relevant_files.is_empty() {
                                        {
                                            let mut logs = logs.lock().unwrap();
                                            logs.push(format!("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è vendorCode: {}", vendor_code));
                                        }
                                        let mut failed_vendor_codes = failed_vendor_codes.lock().unwrap();
                                        failed_vendor_codes.push(vendor_code.clone());
                                        continue;
                                    }
                                    let downloader = match Downloader::new(public_keys_for_thread.clone(), download_path.clone(), vec![vendor_code.clone()]) {
                                        Ok(d) => d,
                                        Err(e) => {
                                            {
                                                let mut logs = logs.lock().unwrap();
                                                logs.push(format!("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Downloader –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {}", e));
                                            }
                                            let mut failed_vendor_codes = failed_vendor_codes.lock().unwrap();
                                            failed_vendor_codes.push(vendor_code.clone());
                                            continue;
                                        }
                                    };
                                    match downloader.generate_media_json(nm_id, &relevant_files, &logs, None) {
                                        Ok(media) => {
                                            let json_output = serde_json::to_string_pretty(&media).unwrap_or_else(|e| format!("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: {}", e));
                                            {
                                                let mut logs = logs.lock().unwrap();
                                                logs.push(format!("JSON Output –¥–ª—è nmId {}:\n{}", nm_id, json_output));
                                            }
                                            if let Err(e) = uploader.upload_links(nm_id, &media.data, &logs, &processed_files) {
                                                {
                                                    let mut logs = logs.lock().unwrap();
                                                    logs.push(format!("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫ –Ω–∞ WB –¥–ª—è nmId {}: {}", nm_id, e));
                                                }
                                                let mut failed_vendor_codes = failed_vendor_codes.lock().unwrap();
                                                failed_vendor_codes.push(vendor_code.clone());
                                            } else {
                                                {
                                                    let mut logs = logs.lock().unwrap();
                                                    logs.push(format!("–°—Å—ã–ª–∫–∏ –¥–ª—è nmId {} –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ", nm_id));
                                                }
                                                if use_local_path {
                                                    for file in relevant_files.iter() {
                                                        let disk_path = format!("/wb_upload/{}", file.name);
                                                        {
                                                            let mut logs = logs.lock().unwrap();
                                                            logs.push(format!("–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ {} —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞", disk_path));
                                                        }
                                                        if let Err(e) = downloader.cleanup_yandex_disk(&disk_path, &logs) {
                                                            {
                                                                let mut logs = logs.lock().unwrap();
                                                                logs.push(format!("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {} —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞: {}", disk_path, e));
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    for file in relevant_files.iter() {
                                                        if let Err(e) = downloader.cleanup_file(&file.local_path, &logs) {
                                                            {
                                                                let mut logs = logs.lock().unwrap();
                                                                logs.push(format!("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {}: {}", file.local_path, e));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Err(e) => {
                                            {
                                                let mut logs = logs.lock().unwrap();
                                                logs.push(format!("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JSON –¥–ª—è nmId {}: {}", nm_id, e));
                                            }
                                            let mut failed_vendor_codes = failed_vendor_codes.lock().unwrap();
                                            failed_vendor_codes.push(vendor_code.clone());
                                        }
                                    }
                                }
                                Err(e) => {
                                    {
                                        let mut logs = logs.lock().unwrap();
                                        logs.push(format!("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è nmId –¥–ª—è vendorCode {}: {}", vendor_code, e));
                                    }
                                    let mut failed_vendor_codes = failed_vendor_codes.lock().unwrap();
                                    failed_vendor_codes.push(vendor_code.clone());
                                }
                            }
                            {
                                let mut processed = processed_files.lock().unwrap();
                                *processed += 1;
                            }
                        }

                        {
                            let mut logs = logs.lock().unwrap();
                            let failed = failed_vendor_codes.lock().unwrap();
                            if !failed.is_empty() {
                                logs.push(format!("–û—à–∏–±–æ—á–Ω—ã–µ vendor codes –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: {}", failed.join(", ")));
                                let mut file_names = file_names.lock().unwrap();
                                *file_names = failed.join("\n");
                            } else {
                                logs.push("–í—Å–µ vendor codes –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ.".to_string());
                                let mut file_names = file_names.lock().unwrap();
                                *file_names = String::new();
                            }
                        }

                        {
                            let mut logs = logs.lock().unwrap();
                            logs.push("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.".to_string());
                        }
                        *is_processing.lock().unwrap() = false;
                    });
                }
            });

            if is_processing {
                let processed = *self.processed_files.lock().unwrap();
                let total = *self.total_files.lock().unwrap();
                if let Some(total) = total {
                    let progress = processed as f32 / total as f32;
                    ui.add_space(20.0);
                    ui.add(egui::ProgressBar::new(progress)
                        .text(format!("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} –∏–∑ {}", processed, total))
                        .desired_width(300.0));
                }
            }

            ui.add_space(20.0);
            ui.horizontal(|ui| {
                if ui.button("üìú –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏").clicked() {
                    self.show_logs = true;
                }
                let failed = self.failed_vendor_codes.lock().unwrap();
                ui.add_enabled_ui(!failed.is_empty() && !is_processing, |ui| {
                    if ui.button("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–ª—è –æ—à–∏–±–æ—á–Ω—ã—Ö").clicked() {
                        self.file_names = failed.join("\n");
                        {
                            let mut logs = self.logs.lock().unwrap();
                            logs.push(format!("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ vendor codes: {}", failed.join(", ")));
                        }
                    }
                });
            });

            ctx.request_repaint();
        });
    }
}

fn text_edit_with_context_menu(ui: &mut egui::Ui, text: &mut String, width: f32, hint_text: &str) {
    let text_edit = egui::TextEdit::multiline(text)
        .desired_width(width)
        .hint_text(hint_text);
    let response = ui.add(text_edit);
    response.context_menu(|ui| {
        if ui.button("üìã –í—Å—Ç–∞–≤–∏—Ç—å").clicked() {
            if let Ok(mut clipboard) = Clipboard::new() {
                if let Ok(clipboard_text) = clipboard.get_text() {
                    *text = clipboard_text;
                }
            }
            ui.close_menu();
        }
        if ui.button("üóë –û—á–∏—Å—Ç–∏—Ç—å").clicked() {
            text.clear();
            ui.close_menu();
        }
    });
}